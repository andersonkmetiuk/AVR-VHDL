-- UTFPR - DAELN
-- Professor Rafael E. de Góes
-- Disciplina de Arquitetura e Organização de Computadores
-- Arquivo TopLevel do Microprocessador para substituir o test_bech
-- versão 1.0 - 2018-10-15

library ieee ;
use ieee.std_logic_1164.all ;
use ieee.numeric_std.all;

ENTITY MikroP IS
PORT (   
		-- sinais que sao usados no toplevel (substituem o que vinha do testbench)
		RST   : in std_logic;  -- KEY0 R22
      CLK_H : in std_logic;  -- L1 (50 MHz)
		
		-- sinais que são a interface de teste no HW físico
		HALT_KEY : in std_logic; 	-- SW9: L2
   	TURBO_EN : in std_logic; 	-- SW8: M1
		LED		: out unsigned (9 downto 6);  -- LED9..LED6
		HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
		HEX1 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- (max 99)
		HEX2 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); -- sempre apagados
		HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)  -- sempre apagados
	 );
END MikroP;


ARCHITECTURE LogicFunction OF MikroP IS
	
	COMPONENT RAMDisp is
	PORT ( 	
				clk : in std_logic;
				endereco : in unsigned(15 downto 0);
				wr_en : in std_logic;
				dado_in : in unsigned(15 downto 0);
				dado_out : out unsigned(15 downto 0);
				
				--- sinais adicionais da RAMDisp
				-- decodificação 7seg
				HEX0 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
				HEX1 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0); --(max 99)
				HEX2 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
				HEX3 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
				-- divisão de clock 
				rst    : in std_logic;
				clk_h  : in std_logic;
				turbo  : in std_logic;
				halt   : in std_logic;
				clk_div: out std_logic
			);
	END COMPONENT RAMDisp;
	
   -- Outros Componentes da Eq01 (2018-1)______________________________________________________________________
		component un_controle is
		port( 	clk : in std_logic;
				j_en : out std_logic;--
				b_en : out std_logic;--
				ram_wr_en: out std_logic;
				mux_ram_addr: out std_logic;
				OM : out std_logic;--
				mux_wd3 : out unsigned(1 downto 0);--
				mux_in_ula : out std_logic;--
				en_flag : out std_logic;--
				we3 : out std_logic;--
				mux_address_in : out std_logic;--
				ula_ctrl: out unsigned(1 downto 0);--
				instr : in unsigned(15 downto 0);
				rst : in std_logic
			);
	end component;

	component rom is
		port( 
			  endereco_rom : in unsigned(6 downto 0);
			  dado : out unsigned(15 downto 0)
			);
	end component;
	component program_counter is
		port( 	clk : in std_logic;
				rst : in std_logic;
				wr_en : in std_logic;	 
				j_en: in std_logic;
				address_in: in unsigned(15 downto 0);
				data_out : out unsigned(15 downto 0)
			);
	end component;
	component register_file is
		port( clk : in std_logic;
			  rst : in std_logic;
			  we3 : in std_logic;
			  a1, a2 : in unsigned(2 downto 0);
			  a3: in unsigned(2 downto 0);
			  wd3  : in unsigned(15 downto 0);
			  rd1, rd2 : out unsigned(15 downto 0)
			);
	end component;
	component ula is
		port( in_A, in_B : in unsigned(15 downto 0);
			  out_S : out unsigned(15 downto 0);
			  flagZ : out std_logic;
			  flagC : out std_logic;
			  op : in unsigned(1 downto 0)
			  );
	end component;
	
	signal j_en, b_en, pc_j_en, mux_ram_addr, OM, mux_in_ula, en_flag, we3, mux_address_in, Z, C, flagZ, flagC, flag, we_ram: std_logic;
	signal mux_wd3, ula_ctrl: unsigned(1 downto 0);
	signal mux_flag : unsigned(3 downto 0);
	signal mux_X, mux_Y: unsigned(2 downto 0);
	signal endereco_rom: unsigned(6 downto 0);
	signal instr, pc_data_out, rom_dado, mux_pc_address_in, mux_reg_file, mux_ula_A, rd1, mux_ula_B, rd2, out_S, ram_out, mux_ram_addr_out: unsigned(15 downto 0);

	-- Sinais do MikroP declarados apenas para não deixar sinais de entrada da ram flutuando
	SIGNAL enderecoRAMDisp: unsigned(15 downto 0);
	SIGNAL wr_enRAMDisp: std_logic;
	SIGNAL dado_inRAMDisp: unsigned(15 downto 0):="0000000000000000";
	
	--SIGNAL CLK: std_logic;
	
	Signal CONT: unsigned (3 downto 0);
	signal clk_div: std_logic;  -- esse é o clock divido de maneira variável pelas teclas TURBO e HALT
	
BEGIN
	rom1: rom port map (endereco_rom => endereco_rom, dado => rom_dado);
	pc1: program_counter port map (clk => clk_div, rst => rst, wr_en => '1', j_en => pc_j_en, address_in => mux_pc_address_in, data_out => pc_data_out);
	REGFILE: register_file port map (clk => clk_div, rst => rst, we3 => we3, a1 => mux_X, a2 => mux_Y, a3 => mux_X, wd3 => mux_reg_file, rd1 => rd1, rd2 => rd2);
	ula1: ula port map (in_A => mux_ula_A, in_B => mux_ula_B, out_S => out_S, flagZ => flagZ, flagC => flagC, op => ula_ctrl);
	UC: un_controle port map(clk => clk_div, rst => rst, j_en => j_en, b_en => b_en, ram_wr_en => we_ram, mux_ram_addr => mux_ram_addr, OM => OM, mux_wd3 => mux_wd3, mux_in_ula => mux_in_ula, en_flag => en_flag, we3 => we3, mux_address_in => mux_address_in, ula_ctrl => ula_ctrl, instr => rom_dado);

	RAMeDISP: RAMDisp
	PORT MAP (	
					clk=>clk_h,
					endereco => mux_ram_addr_out,
					dado_in=> rd2,
					dado_out => ram_out, 
					wr_en=>we_ram,
					
					rst    => RST,
					clk_h  => CLK_H,  
					turbo => TURBO_EN,
					halt => HALT_KEY,
					clk_div => clk_div,
					
					HEX0=>HEX0, 
					HEX1=>HEX1, 
					HEX2=>HEX2, 
					HEX3=>HEX3
				);
			
-- Processo Exemplo que roda na cadência de clk_div
	process (clk_div, RST)
   Begin
		If RST = '0' then
			CONT <= "0000";
		elsif clk_div' event and clk_div = '1' then
			CONT <= CONT+1;
		end if;
	end process;

	process(clk_h, rst)
	begin 
		if rst = '0' then
			Z <= '0';
			C <= '0';
	
		elsif rising_edge(clk_h) then 
	
			if en_flag = '1' then
				Z <= flagZ;
				C <= flagC;
			end if;
		end if;
	end process;
	
	
	
-- 	___________________________________________________________________________________
	--enderecoRAMDisp <= "0000000001111111"; -- endereço 127
	--wr_enRAMDisp <= '1';
	--dado_inRAMDisp (3 downto 0 ) <= CONT;
	--dado_inRAMDisp (3 downto 0 ) <= pc_data_out(3 downto 0);
	
	LED(9) <= cont(3);   -- LED9  pino R17 
	LED(8) <= cont(2);   -- LED8  pino R18
	LED(7) <= cont(1);	-- LED7  pino U18
	LED(6) <= cont(0);	-- LED6  pino Y18
-- 	___________________________________________________________________________________
	

	endereco_rom <= to_unsigned(to_integer(pc_data_out), 7);
	
	mux_X <= rom_dado(11 downto 9) when OM = '0' else rom_dado(2 downto 0);
	mux_Y <= rom_dado(11 downto 9) when OM = '1' else rom_dado(2 downto 0);
	
	mux_ram_addr_out <= rd1 when mux_ram_addr = '0' else
						rd2;
	
	mux_reg_file <= to_unsigned(to_integer(rom_dado(7 downto 0)), 16)  when mux_wd3 = "00" else
					out_S when mux_wd3 = "01" else 
					rd2 when mux_wd3 = "10" else
					ram_out when mux_wd3 = "11" else
					to_unsigned(0,16);
					
	mux_ula_A <= pc_data_out when mux_in_ula = '0' else rd1;
	mux_ula_B <= "1111111100000000" + rom_dado(7 downto 0) when mux_in_ula = '0' else rd2;
	
	mux_flag <= rom_dado(11 downto 8);
	
	mux_pc_address_in <= 	"0000000000000000" + rom_dado(5 downto 0) when mux_address_in = '0' else
							out_S;
							
	pc_j_en <= j_en or (b_en and flag);
	
	flag <= Z when mux_flag = "0111" else
			C when mux_flag = "1101" else
		    not(Z or C) when mux_flag = "1110" else
			'0';


END LogicFunction ;


